	kill(all);
rvflist:[]; /* list of random variable families, format of each family: [random variable, name of family, variables, case rules] */
rvlistBase:[]; /* list of random variables along with their corresponding family they belong to*/
rvlist:[];  /* list of all random variables */
rulelist:[]; 
explistBase:[]; /* instances of cases (after replacement by random variable instance) */
/*added for the bug */
global_X:[];
global_NAME:[];
global_VARS:[];
/*****************************************************************************************************************************************************/
makeRVFamily(X,NAME,VARS,RULES) :=
/* Parameters: Random Variable, Name of the family, variables in the rhs of case, all cases*/
block( 
	/* 
	if list is empty or the NAME being added not in the list just append
	else
	append the VARS and RULES in the corresponding NAME family
	*/

	[exists:false,i:0, nexists:false, vexists:false],

	if(length(rvflist)=0) then
	(
		rvflist:append(rvflist,[[X,NAME,VARS,RULES]]), 
		return (rvflist)
	),
	
	for c:1 step 1 while (c<=length(rvflist) and not exists) do
	(
		nexists:member(NAME,rvflist[c]),
		vexists:member(X,rvflist[c]),
		exists:nexists and vexists,
        	i:i+1
	),


	if(exists) then
	(
		rvflist[i][3]:append(rvflist[i][3],VARS),
		rvflist[i][4]:append(rvflist[i][4],RULES),
		return (true)
	)
	else
	(
		rvflist:append(rvflist,[[X,NAME,VARS,RULES]]),
		return (true)
	)
);

/*****************************************************************************************************************************************************/
makeRV(X,NAME,VARS):=
/* make an instance of random variable family*/
/* parameters: new name of random variable, name of the existing family, case variables to be replaced*/
block( 
	[exists:false, result:[]],
	/* there should be no two same random variables irrespective of their families*/
	for c:1 step 1 while (c<=length(rvlistBase) and not exists) do
	(
		exists:member(X,rvlistBase[c])
	),
	if(exists) then
	(
		print("Random Variable already exists"),
		return(false)
	)
	else
	(
		rvlistBase:append(rvlistBase,[[X,NAME,VARS]]),
		rvlist:append(rvlist,[X]),
		/* do substitution of random variable instances in cases*/
		result:executeRules(X,NAME,VARS),
	        global_X:X, global_NAME:NAME, global_VARS:VARS,	
		return(result)
	)	
);

/*****************************************************************************************************************************************************/
executeRules(X,NAME,VARS):=
block(
	/* populate explistBase after substituting VARS and X of rvflist in RULES with VARS and X here*/
	[explist:[],exists:false,c:0,tmpexplist:[],substrules:[],subexplist:[]],
	
	/* find the index of the array where the family exists in rvflist*/
	for i:1 step 1 while (i<=length(rvflist) and not exists) do
	(
		exists:member(NAME,rvflist[i]),
		c:c+1
	),
	/* if family doesnot exist return error*/
	if (not exists) then 
		(
			print ("family does not exist"),
			return(false)
		),

	tmpexplist:rvflist[c][4],
	/* create substitution rule that replaces random variable in family with the random variable in the instance*/
	substrules:[ev(rvflist[c][1]=X)],
	/* create substitution rule that replaces case variables in family with the case variables in the instance*/
	for i:1 step 1 while (i<=length(rvflist[c][3])) do
	(
		substrules:apply(append,[substrules,[ev(rvflist[c][3][i]=VARS[i])]])		
	),
	/* do substitution*/
	subexplist:apply(subst,[substrules,tmpexplist]),
	explist:append(explist,subexplist),
	/* maintain reversed substituted cases to make sure longer case applies first*/
	explistBase: append (explistBase, [reverse(explist)]),
 	print("explistBase is ", explistBase),	
	return(explist)
);

/*****************************************************************************************************************************************************/

/* Modified delta.mac function - makerules */
/* change history
 - oflag:false defined, oval:[]
 - operator checks added - Case, OtherWise and else error (earlier no check for Case) 
 - OtherWise -- oflag:true
 - call to deltaexp takes two more parameters oflag(true if OtherWise encountered in Cases) and oval(value that OtherWise will take)
*/
/************************************************************************************************************************************************/
makerules(iexplist):=
block(
	[_explist:iexplist,lhs:0,rhs:0,list3:[],tmp:0,tmp2:1,caselist:[],exprlist:[],caseargs:[],newSymCases:[],length_explist:length(iexplist),SymmetricCase:0, length_caseargs:0,rulelist:[],oflag:false,oval:[],list3_pass:[]],
	remove(all,matchdeclare),
	clear_rules(),
		for b:1 thru length_explist step 1 do
		(
			if op(_explist[b]) = "=" then
			(
				lhs:args(_explist[b])[1],
				rhs:args(_explist[b])[2],
				
				if string(op(lhs))="expectation" then
				(
					list3:[],
					if op(args(lhs)[1])="*" then
					(
						for c:1 thru length(args(args(lhs)[1])) step 1 do
								list3:append(list3,args(args(args(lhs)[1])[c]))
					)
					else
						list3:append(list3,args(args(lhs)[1])),					
				  	list3_pass:list3,	
					list3:append(list3,[_e]),
					apply(matchdeclare,[list3,all]),

/*added - may */
					print("list3_pass is ", list3_pass),
/* end of added */
					tmp:args(lhs)[1]*_e,
					tmp2:1,
					caselist:[],
					exprlist:[],

					if (not atom(rhs))and string(op(rhs))="Cases" then
					(
						caseargs:copylist(args(rhs)), length_caseargs:length(caseargs),
						for caseindex:1 thru length_caseargs step 1 do
						(
							if string(op(args(rhs)[caseindex]))="SymCase" then
							(
								/*print("caseargs=",caseargs),*/

								SymmetricCase:args(caseargs[caseindex])[1],

								/*print("SymmetricCase=",SymmetricCase),*/							
								
								newSymCases:createSymmetricCases(SymmetricCase),
								
								/*print("newSymCases",newSymCases),*/
								
								for newSymIndex:1 thru length(newSymCases) step 1 do 
								(
									caselist:append(caselist,[[newSymCases[newSymIndex]]]),							
									exprlist:append(exprlist,[args(caseargs[caseindex])[2]])
								)
							)
							else
							(
								if string(op(args(rhs)[caseindex]))="Case" then
								(
									print("[[args(caseargs[caseindex])[1]]] is ", [[args(caseargs[caseindex])[1]]]),	
									caselist:append(caselist,[[args(caseargs[caseindex])[1]]]),
									exprlist:append(exprlist,[args(caseargs[caseindex])[2]])
								)
								else
								(
									if string(op(args(rhs)[caseindex]))="OtherWise" then
									(
										oflag:true,
										oval:args(caseargs[caseindex])
									)
									else
									(
										print("Cases can take - Case, SymCase or Otherwise ")
									)
								)
							)
						),
/* added function call to canonize */
						caselist:deep_copy(caselist,0),
						print(" in deltaexp - caselist is ", caselist),
			/*			caselist:canonize(caselist, list3_pass),	
				*/		print("*****executeRules called "),	
						print("rvflist = ",rvflist),
						explistBase:[],
						executeRules(global_X, global_NAME, global_VARS),	
						tmp2:deltaexp(caselist,exprlist,oflag,oval),
						tmp2:tmp2*_e
					)
					else
					(
						tmp2:args(_explist[b])[2]*_e
					),
					rulelist:append(rulelist,[concat("myrule",b)]),
					apply(defrule,[last(rulelist),tmp,tmp2])
/**********					apply(defmatch,[last(rulelist),tmp,tmp2])****/				
				)
			)
			else print("??????????Format Error???????????")
		),
	return(rulelist)
);


/*****************************************************************************************************************************************************/
dsimplifycommon(eqc):=
block
(
       [commoninput:eqc, eqd:eqc],
	sumexpand:false, /* to restrict renaming of indices of sums inside the rule definition otherwise rd2&3 wont work*/
	matchdeclare([_i,_j,_k,_l],all),
	apply(defrule,[rd1,d(_i,_i),1]),
	apply(defrule,[rd4,d(_i,_j)^_k,d(_i,_j)]),
	apply(defrule,[rd2,sum(d(_i,_j),_j,1,_k),1]),
	apply(defrule,[rd3,sum(d(_i,_j),_i,1,_k),1]),
	eqd:apply(apply1,['commoninput,rd1,rd4,rd2,rd3]),
	
	while(commoninput#eqd) do /* Fixed Point*/
	(
		commoninput:eqd,
		eqd:apply(apply1,['commoninput,rd1,rd4,rd2,rd3])
/*		print("commoninput=",commoninput,"----eqd=",eqd)*/
	),
/*	clear_rules(),*/
	matchdeclare([_i,_j,_k,_l],false),
/*	sumexpand:true, */  /*to restrict renaming of indices to allow firing of fixed point in dsimplify where you match two sums*/
	return (eqd)
);

/*****************************************************************************************************************************************************/
dsimplifyproducts(eq1):=
block
(
	[prodargs:[], prodinput:eq1, result:0],

	if not atom(prodinput) then
	(
		prodargs:args(prodinput),

		for a:1 thru length(prodargs) step 1 do
		(
	       if not atom(prodargs[a]) then
	       (
			if string(op(prodargs[a]))="sum" then
			(
				prodargs[a]:dsimplifysummands(prodargs[a])
	        	)
			else if op(prodargs[a])="*" then
			(
				prodargs[a]:dsimplifyproducts(prodargs[a])
			)
/*			else
			(
				print ("a=",a,":prodargs[a]=",prodargs[a],":operator=",op(prodargs[a]))
			)*/
	        )
	   	),
		result:apply(op(prodinput),prodargs),
		return (result)
	)
	else
		return(prodinput)
);

/*****************************************************************************************************************************************************/

dsimplifysummands(summandinput):=
block
( 
/*				print ("subresult=",subresult,":subeq=",subeq),
				print ("subst=",subst,":uniquevar2=",uniquevar2),
				print ("summandinput=",summandinput),
*/
	[result:0,inputeq:summandinput,sumargs,searchvar,summandargs:[],flag:1,index:1,uniquevar1,uniquevar2,subeq,sublist1,sublist2,subresult:0,tmpres,temp1,temp2,temp3,temp4,temp5,temp6,temp7,temp8,subst1,subst2],
	sumargs:args(inputeq),
	searchvar:sumargs[2],
	if op(sumargs[1])#"*" then
      (  
       if string(op(sumargs[1]))="sum" then
       (
		temp1:sumargs[1],
		temp2:sumargs[2],
		temp3:sumargs[3],
		temp4:sumargs[4],
		subresult:dsimplifysummands(temp1),
		result:apply(sum,[subresult,temp2,temp3,temp4]),
		return (result)
	 )
	 elseif string(op(sumargs[1]))="d" then
	 (
            uniquevar1:?gensym(),
            uniquevar2:?gensym(),
            apply(matchdeclare,[[uniquevar1,uniquevar2],all]),
		apply(defmatch,[patt1,d(uniquevar1,searchvar)]),
		apply(defmatch,[patt2,d(searchvar,uniquevar2)]),
		sublist1:apply(patt1,[sumargs[1]]),
		sublist2:apply(patt2,[sumargs[1]]),
	    if listp(sublist1) then
			(
			    subresult:1,
            	flag:0,
            	return (subresult)
			)
			elseif listp(sublist2) then
			(
			    subresult:1,
            	flag:0,
            	return (subresult)
			)
            else
            (
                subresult:inputeq,
                flag:0,
                return(subresult)
            )
         )
         else 
         (
                return(inputeq)       
         )
      ),
	if op(sumargs[1])="*" then
    (
	 summandargs:args(sumargs[1]),
     while index<=length(summandargs) and flag=1  do
	(
         if not atom(summandargs[index]) then
         (
            uniquevar1:?gensym(),
            uniquevar2:?gensym(),
            apply(matchdeclare,[[uniquevar1,uniquevar2],all]),
		apply(defmatch,[patt1,d(uniquevar1,searchvar)]),
		apply(defmatch,[patt2,d(searchvar,uniquevar2)]),

	      temp6:summandargs,
		temp:summandargs[index],	
			
		subst1:apply(apply,[patt1,[summandargs[index]]]),
		subst2:apply(apply,[patt2,[summandargs[index]]]),
		

            if listp(subst1) then
		(
				subeq:apply("*",summandargs),
				subeq:delete(summandargs[index],subeq),
                		uniquevar1:apply(subst,[subst1,uniquevar1]),
				subresult:apply(subst,[[searchvar=uniquevar1],subeq]),
            	flag:0,
            	return (subresult)
		)
		elseif listp(subst2) then
		(
				subeq:(apply("*",summandargs)),
				subeq:quotient(subeq,summandargs[index]),
                		uniquevar2:apply(subst,[subst2,uniquevar2]),
				subresult:apply(subst,[[searchvar=uniquevar2],subeq]),
				
            	flag:0,
            	return (subresult)
		),
			
		    if string(op(summandargs[index]))="sum" then
		    (
		       tmpres:dsimplifysummands(temp),
			   temp6[index]:tmpres
            )
          ),
           index:index+1
    )),
    if flag=1 or index > length(summandargs) then
    (
		subeq:apply("*",temp6),
		result:apply(op(inputeq),[subeq,sumargs[2],sumargs[3],sumargs[4]]),
		return (result)
	)
	else
	    return(subresult)
);





/*****************************************************************************************************************************************************/
dsimplifyadditions(eqadd):=
block
(
     [subresult:0,result:0,additionsinput:eqadd, additionargs:[],summandinput:0,productinput:0],
     additionargs:args(additionsinput),
	for aindex:1 thru length(additionargs) step 1 do
     ( 
        if not atom(additionargs[aindex]) then
        (
      	if string(op(additionargs[aindex]))="sum" then
    		(
			summandinput:additionargs[aindex],
    			additionargs[aindex]:dsimplifysummands(summandinput)
            )
            elseif op(additionargs[aindex])="*" then
		(
			productinput:additionargs[aindex],
    			additionargs[aindex]:dsimplifyproducts(productinput)
            )
		elseif op(additionargs[aindex])="-" then
            (
            	subresult:dsimplifyproducts(args(additionargs[aindex])[1]),
    	    		additionargs[aindex]:apply("-",[subresult])
    	   	)
		elseif op(additionargs[aindex])="//" then
            (
			productinput:additionargs[aindex],
    			additionargs[aindex]:dsimplifyproducts(productinput)
    	   	)
	
  	   )
   ),
	result:apply(op(additionsinput),additionargs),
	return (result)
);

/*****************************************************************************************************************************************************/
dsimplify2(eq2):=
block(
 	[ineq1:eq2,eqop1,result:eq2],
	if not atom(ineq1) then
	(
		eqop1:op(ineq1)
	)
	else
	(
		print("ineq1=",ineq1),
		return(ineq1)
	),


	if string(eqop1)="sum" then 
	(
		result:dsimplifysummands(ineq1)
	)
	elseif eqop1="*" then
	(
		result:dsimplifyproducts(ineq1)
	)
	elseif eqop1="+" or eqop1="-" then
	(
		result:dsimplifyadditions(ineq1)
	)
	elseif eqop1="//" then
	(
		result:dsimplifyproducts(ineq1)
	)
	else
	(
		result:ineq1
	),

	return (result)
);
/*****************************************************************************************************************************************************/
dsimplify_old(deq):=
block(
	[dsimpinput:deq],
	declare(sum,linear),
	[expandeq:expand(dsimpinput)],
	[dsmpeq1:expandeq],
	[dsmpeq2:dsimplifycommon(dsmpeq1)],
	[dsmpeq3:dsmpeq2],	 	
    	[dsmpeq1:dsimplify2(dsmpeq3)],
	[dsmpeq2:dsimplifycommon(dsmpeq1)],
	for ind:1 step 1 unless dsmpeq1=dsmpeq2 /* and ind>5 */ do
    	( 
      	[dsmpeq2:dsimplifycommon(dsmpeq1)],
		[dsmpeq3:dsmpeq2],
      	[dsmpeq1:dsimplify2(dsmpeq3)],
		print("index=========",ind)
     	),
	return (dsmpeq2)
);

/*****************************************************************************************************************************************************/
dsimplify(deq):=
block(
	[_deq:deq,dsmpeq1,dsmpeq2],
	declare(sum,linear),
	_deq:expand(_deq),
	dsmpeq2:dsimplifycommon(_deq),
      	dsmpeq1:dsimplify2(dsmpeq2),
     	while (dsmpeq1#dsmpeq2) do /*Fixed Point .. sumexpand should be false at this point*/
    	( 
      		dsmpeq2:dsimplifycommon(dsmpeq1),
      		dsmpeq1:dsimplify2(dsmpeq2)
    	),
	return (dsmpeq1)
);

/*****************************************************************************************************************************************************/
ex1(exeq1):=
block
(
      	[_explst:explistBase,rule_list:[],exeq,r:[]],
	sumexpand:true,
	exeq1:expand(exeq1),
	exeq:exeq1,
 	/* print("length(explistBase) is ", length(explistBase)),	
	print("explistBase is ",explistBase),
	debug comment */
        for i:1 thru length(explistBase) do
	(
		rule_list:makerules(_explst[i]),
		exeq:intosum(exeq),
		exeq:apply (apply1, append([exeq], rule_list))
	),
/*	clear_rules(),*/
	return (exeq)
);


/*****************************************************************************************************************************************************/
var(eq1 /*,vexplist*/):=
block
(
   [_explist:explistBase, x:0, variance:0, y:0],
/*   print("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&"),	
   debug comment */ 
   print("eq1 is ", eq1), 
   x:ex1(eq1),
   y:ex1(eq1*eq1),
   variance:y-x^2,
   return (variance)   
);

/*****************************************************************************************************************************************************/
covar(eq1,eq2 /*,iexplist*/):=
block
(	
   [_explist:explistBase,x:0,y:0,z:0,covariance:0],
   x:ex1(eq1),
   y:ex1(eq2),
   z:ex1(eq1*eq2),
   covariance:z-x*y,
   return (covariance)   
);

/*****************************************************************************************************************************************************/
drewrite(ineq):=
block
(
   [sresult:0],
   sumexpand:false, /* to restrict expansion of sums inside the rule definition otherwise rd2&3 wont work*/
   matchdeclare([_x,_n,_f,_p,_g,_q],all),
   apply(defrule,[s1,sum(_f(_x),_x,1,_n),S(_f)]),
   apply(defrule,[s2,sum(_f(_x)*_g(_x),_x,1,_n),S(_f*_g)]),
   apply(defrule,[s3,sum(_f(_x)^_p,_x,1,_n),S(_f^_p)]),
   apply(defrule,[s4,sum(_f(_x)^_p*_g(_x)^_q,_x,1,_n),S(_f^_p*_g^_p)]),
   sresult:apply(apply1,[ineq,s1,s2,s3,s4]),
/*   matchdeclare([_i,_k,_f,_l],false),
   clear_rules(),*/
/*   sumexpand:true,*/
   return (sresult)
);

dRewrite(eq2):=
block(
[niceVars:[i1,i2,i3,i4,i5,i6,i7]],
dRewrite2(eq2,niceVars)
);

/*****************************************************************************************************************************************************/
dRewrite2(eq2,niceVars):=
block(
[leq2:eq2, lniceVars:niceVars, eqop1:0, result:eq2, argsIneq:[eq2], tempresult:0, templist:[]],

if (not atom(leq2)) and length(lniceVars)>0 then
(
 	eqop1:op(eq2), argsIneq:args(eq2),
	if string(eqop1)="sum" then 
	(
		if length(lniceVars)>0 then
		(
			leq2:subst(lniceVars[1],argsIneq[2],leq2),
/*			print("leq2=",leq2),*/

/*			[arg2:args(neweq2)[2],arg3:args(neweq2)[3],arg4:args(neweq2)[4]],*/

			lniceVars:rest(lniceVars),
/*			print("lniceVars=",lniceVars),*/

			tempresult:ev(dRewrite2(args(leq2)[1],lniceVars)),

/*			print("tempresult=",tempresult),*/

			result:apply("sum",[tempresult,args(leq2)[2],args(leq2)[3],args(leq2)[4]]),
			return (result)
		)
		else 
		(
			return (leq2)
		)
	) /* test for powers --reminder */
	elseif eqop1="*" or eqop1="+" or eqop1="-" or eqop1="//" then
	(
		for _index:1 thru length(argsIneq) step 1 do
		(
			templist:append(templist,[ev(dRewrite2(argsIneq[_index],lniceVars))])
		),
/*		print("templist=",templist),*/
		result:apply(eqop1,templist)
	)
	else
	(
/*		print("No matching operators"),*/
		result:leq2
	),
	return (result)
)
else 
return (leq2)
);



/******** s1,s2,s3,s4 rules apply indefinitely for unknown reasons .. maxima people gave no logical reason.. so switching to fixed point implementation 
drewrite_new(ineq):=
block
(
   [sresult:0],
   sumexpand:false, 
   matchdeclare([_i,_k,_f,_l,_g,_m,_e],all),
   apply(defrule,[s1,_e*sum(_f(_i),_i,1,_k),_e*S(_f)]),
   apply(defrule,[s2,_e*sum(_f(_i)^_l,_i,1,_k),_e*S(_f^_l)]),
   apply(defrule,[s3,_e*sum(_f(_i)^_l*_g(_i)^_m,_i,1,_k),_e*S(_f^_l*_g^_m)]),
   apply(defrule,[s4,_e*sum(_f(_i)*_g(_i),_i,1,_k),_e*S(_f*_g)]),
   sresult:apply(apply1,[ineq,s1,s2,s3,s4]),
   return (sresult)
);
*****************/

/*****************************************************************************************************************************************************/
main(filename):=
block
(
   makeRVFamily(x, randomHistogram, [f], explist2),
   print("******************************"),
   print("rvflist:",rvflist),
   [explst:makeRV(x1,randomHistogram,[f])],
   print("rvlistBase:",rvlistBase),
   print("rvlist:",rvlist),
   print("eq:",eq),
   print("explst:",explst),
   res1:ex1(eq,explst),
   res2:drewrite(res1),
   res3:factor(res2),
   print("After Simplification:",res3)

/*******

   makeRVFamily(z,histogram,[v,w],[expectation(I,L)=r(v,w)]),
   makeRVFamily(z,histogram,[m,n],[expectation(z)=d(m,n)]),
   makeRV(rh,histogram,[a,b,c,d]),
   print("After MakeRV1:",rvlist,rvflist)
*******/

/*******
   print("******************************"),
   print("Input:",eq),
   makeRVFamily(x, randomHistogram, [r], explist1),
   print("******************************"),
   print("rvflist:",rvflist),
   makeRV(x,randomHistogram,[r]),
   print("******************************"),
   print("rvlist:",rvlist),
   print("******************************"),
   print("explist:",explist),
*******/

/******** latest
   makeRVFamily(x, randomHistogram, [r], explist2),
   print("******************************"),
   print("rvflist:",rvflist),
   [explst:makeRV(x1,randomHistogram,[r1])],
   print("rvlistBase:",rvlistBase),
   print("rvlist:",rvlist),
   res1:ex1(eq,explst),
   res1:covar(eq,eq,explst),
   res2:drewrite(res1),
   print("After Simplification:",res2) 

   res3:var(eq),
   res4:drewrite(res3),
   print("After Simplification:",res4)
*********/
);	


/*Equivalent sets*/
/*****************************************************************************************************************************************************/
/*killall();*/
outset:set();

makeeqsets(iset,tset):=
block(
	if length(iset)=1 then ( tmpset:set(),return(true)),
 	for i:1 step 1 while (i<=length(iset)) do
	(		
		tmplist:listify(iset),
		tmpset:set(tmplist[i]),
		ttset:tset,
		diffset:setdifference(iset,tmpset),
		newout:append(set(tmpset),set(diffset)),
		newout2:set(setify(flatten(full_listify(append(set(tmpset),set(diffset)))))),
		if not emptyp(ttset) then
		(
			newout:append(newout,ttset),
			newout2:append(newout2,set(setify(flatten(full_listify(ttset)))))
		),
		outset:append(outset,set(newout)),
		outset:append(outset,set(newout2)),
		if not emptyp(ttset) then
		(
			ttset:append(ttset,set(tmpset))
		)
		else
		(
			ttset:set(append(ttset,tmpset))
		),
		makeeqsets(diffset,ttset)
	)
);

eqsets(ip):=
block(
/*	killall(),*/
	outset:set(),
	ipset:setify(ip),
	makeeqsets(ipset,set()),
	return (outset)
);

/* to do:
	check for overlap of variables between the two indifferent things
 */
verify(cases,vars):= 
block(
	reqdcases:eqsets(vars),
	caseset:fullsetify(cases),
	iserror:false,
	print("Input Cases:",cases),
	print("Input Variables:",vars),
	print("Checking against Generated Cases:",reqdcases),

	if length(caseset)#length(cases) then
	(
		print("Ambiguous Cases"),
		iserror:true
	)
	else
		print("No Ambiguous Cases"),
	if length(caseset)#length(reqdcases) then
	(
		print("Incomplete Cases. More Cases Reqd"),
		iserror:true
	)
	else
		print("Complete Cases"),
	
	iserror2:false,
	for i:1 step 1 thru length(cases) do
	(
		exists:intersect(reqdcases,set(fullsetify(cases[i]))),
		if length(exists)=0 then
		(
			print("Invalid Case, Not an Eq Set",cases[i]),
			iserror2:true
		)
	),

	if not iserror2 then
	(
		print("Valid Cases")
	),
	
	if not iserror and not iserror2 then	
		return (true)
	else
		return (false)
);



applySymmetry(iexplist):=
block(
	[_explist:iexplist,_debug:true],
		for b:1 thru length(_explist) step 1 do
		(
			if (_debug=true) then print("_explist=",_explist),
			if op(_explist[b]) = "=" then
			(
				[lhs:args(_explist[b])[1],
				rhs:args(_explist[b])[2]],
				
				if string(op(lhs))="expectation" then
				(
					[caselist:[],exprlist:[]],
					if string(op(rhs))="Cases" then
					(
						[caseargs:args(rhs)],
						for caseindex:1 thru length(caseargs) step 1 do
						(
							caselist:append(caselist,[[args(caseargs[caseindex])[1]]]),
							exprlist:append(exprlist,[args(caseargs[caseindex])[2]])
						),
						tmp2:createSymmetricCases(caselist),
						if (_debug=true) then print("caselist=",caselist),
						if (_debug=true) then print("exprlist=",exprlist),
						if (_debug=true) then print("tmp2=",tmp2)
					)
				)
			)
			else print("??????????Format Error???????????")
		),
	return(rulelist)
);

/* source case... format is list of lists [[i,j],[k]]*/
createSymmetricEqSets(sourcecase):= 
block(
	[svars:listify(setify(flatten(sourcecase))),eqsetcases:[],noOfSets:0,lengthOfSets:[], symmetricCases:[],noOfSetsg:0,lengthOfSetsg:[]],
	eqsetcases:full_listify(eqsets(svars)),
	noOfSets:length(sourcecase),
/*      print(eqsetcases),*/
	for m:1 step 1 thru length(sourcecase) do
	(
		lengthOfSets:append(lengthOfSets,[length(sourcecase[m])])
	),
	lengthOfSets:sort(lengthOfSets),
/*     print("signature=",noOfSets,":",lengthOfSets),*/
	for n:1 step 1 thru length(eqsetcases) do
	(
		noOfSetsg:length(eqsetcases[n]),
		lengthOfSetsg:[],
		for x:1 step 1 thru noOfSetsg do
		(
			lengthOfSetsg:append(lengthOfSetsg,[length(eqsetcases[n][x])])
		),
		lengthOfSetsg:sort(lengthOfSetsg),
/*          print("signatureg=",noOfSetsg,":",lengthOfSetsg), */
		if noOfSets=noOfSetsg and lengthOfSets=lengthOfSetsg then
		(
			symmetricCases:append(symmetricCases,[eqsetcases[n]])
		)
	),
/*	print("symmetricCases=",symmetricCases),*/
	return (symmetricCases) 
/* output in list format */
);


createSymmetricCases(symcase):=
block(
	[lSymCase:symcase,indiff_flag:0,sumexp:0,productexp:1,Indiff_arglist:[],Diff_arglist:[],newIndiff_list:[],newDiff_list:[],newDiff_Cases:[],tempDiff_Cases:[]],
/*	print("lSymCase=",lSymCase),*/
		if string(op(lSymCase))="In" then
		(
			Indiff_arglist:args(lSymCase),
			for j:1 step 1 thru length(Indiff_arglist) do    /* for each argument of Indifferent*/          
			(
				if string(op(Indiff_arglist[j]))="Df" then
				(
					Diff_arglist:args(Indiff_arglist[j]),
					for k:1 step 1 thru length(Diff_arglist) do    /* for each argument of Different*/          
					(
						if string(op(Diff_arglist[k]))="Eq" then
						(
							Diff_arglist[k]:args(Diff_arglist[k])
						)
						else
						(
							print("Error in Format--in Create Symmetric Cases1---",symcase)
						)
					),
					newDiff_list:createSymmetricEqSets(Diff_arglist), newDiff_Cases:[],
					for m:1 step 1 thru length(newDiff_list) do 
					(	
						tempDiff_Cases:[],
						for n:1 step 1 thru length(newDiff_list[m]) do
						(
							tempDiff_Cases:append(tempDiff_Cases,[apply(Eq,newDiff_list[m][n])])
						),
						newDiff_Cases:append(newDiff_Cases,[apply(Df,tempDiff_Cases)])
					),
				newIndiff_list:append(newIndiff_list,[setify(newDiff_Cases)])
				)
				else
				(
					print ("Error in Format--in Create Symmetric Cases2")
				)	
			),
/*			print("newInDiff_list=",newIndiff_list),*/
			lSymCase:listify(createInDiffCases(newIndiff_list))
		)
		else
		(
			print ("Error in Format--in Create Symmetric Cases3")
		),
/*	print("lSymCase=",lSymCase),*/
	return (lSymCase)	
);

createInDiffCases(Indiffset):=
block(
[cross_product:listify(apply(cartesian_product,Indiffset)),lengthp:0,output:[]],
lengthp:length(cross_product),
for i:1 step 1 thru lengthp do
(
    output:append(output,[apply(In,cross_product[i])])
),
return(output)
);


/* Modified delta.mac function - deltaexp */
/* change history 
 - oflag 3rd parameter and oval 4th parameter to the function 
 - osumexp and oproductexp added 
 - if oflag - false .. normal behavior and oval ignored 
 - if oflag - true .. OtherWise logic included and oval used to calculate
*/
deltaexp(dcases,ocases,oflag,oval):=
block
(

[eqlist:dcases,indiff_flag:0,sumexp:0,productexp:1,subsetlist:0,Indiff_arglist:[],diff_arglist:[],temp_diff_arglist:[],putdeltaresult:0,osumexp:0,oprouctexp:1],	
	for i:1 step 1 thru length(eqlist) do    /* for each case -- first unfolding each case*/
	(
		productexp:1,
		oproductexp:1,
		subsetlist:eqlist[i][1],
		if string(op(subsetlist))="In" then
		(
			Indiff_arglist:args(subsetlist),
			for j:1 step 1 thru length(Indiff_arglist) do    /* for each argument of Indifferent*/          
			(
				if string(op(Indiff_arglist[j]))="Df" then
				(
					diff_arglist:args(Indiff_arglist[j]),temp_diff_arglist:[],
					for k:1 step 1 thru length(diff_arglist) do    /* for each argument of Different*/          
					(
						if string(op(diff_arglist[k]))="Eq" then
						(
							temp_diff_arglist:append(temp_diff_arglist,[args(diff_arglist[k])])
							/*diff_arglist[k]:args(diff_arglist[k])*/
						)
						else
						(
							print("Error in Format----in Delta Exp 1 ",diff_arglist[k])
						)
					),
					putdeltaresult:putdelta(temp_diff_arglist),
					productexp:productexp*putdeltaresult
				)
				else
				(
					print("Error in Format----in Delta Exp 2---",Indiff_arglist[j])
				)	
			)
		)
		else
		(
			print("Error in Format----in Delta Exp 3")
		),
		
		if oflag=true then
		(
			oproductexp:productexp*oval,
			osumexp:osumexp+oproductexp
		),
		productexp:productexp*ocases[i],
		sumexp:sumexp+productexp	
	),
	if oflag=true then
	(
		sumexp:sumexp+(1-osumexp)
	),
	return (sumexp)
);

putdelta(varlist):=
block(
		[vproductexp:1,m:0],
		for j:1 step 1 thru length(varlist) do    /* for each equality or inequality set*/          
		(
			for k:1 step 1 thru length(varlist[j]) do 	 
			(
				if k=1 then
				(
					m:length(varlist),
					for l:j+1 step 1 thru m do 
					(	
						vproductexp:vproductexp*(1-apply(d,[varlist[j][k],varlist[l][k]]))
					)
				)
				else
				(
					vproductexp:vproductexp*(apply(d,[varlist[j][k-1],varlist[j][k]]))						
				)
			)
		),
	return (vproductexp)
);
